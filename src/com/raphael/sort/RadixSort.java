package com.raphael.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * @author: create by  Raphaelkxy
 * @version: v1.0
 * @description: com.raphael.sort
 * @date:2019/8/6
 */
public class RadixSort {
    public static void main(String[] args) {
        int arr[] = {53,3,542,748,14,214};
        //System.out.println(ar);
        int []arr1 = new int[80000];
        for(int i=0;i<80000;i++){
            arr1[i]=(int)(Math.random()*8000000);
        }

        Date data1 = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date1Str = simpleDateFormat.format(data1);
        System.out.println("排序前的时间是="+date1Str);
//        quickSort(arr1,0,arr.length-1);
//        quickSort(arr1,0,arr.length-1);
        radixSort(arr1);

        Date data2 = new Date();
        String date1Str2 = simpleDateFormat.format(data2);
        System.out.println("排序后的时间是="+date1Str2);
    }

    //基数排序的方法
    public static void radixSort(int []arr) {
        //第一轮排序（针对每个元素的个位进行排序处理）

        //1.得到数组中最大的数的位数
        int max = arr[0];//假设第一个数就是最大数
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        //得到最大数是几位数
        int maxLength = (max + "").length();

        //定义一个二维数组表示10桶，每个桶就是一个一维数组
        //说明
        //1.二维数组包含10个一维数组
        //2.为了防止放入数的时候，数据溢出，则每个一维数组（桶），大小定位arr.length
        //3.基数排序使用空间换时间的经典算法
        int[][] bucket = new int[10][arr.length];
        //为了记录每个桶中，实际存放了多少个数据，我么定义了一维数组来记录各个桶每次放入的数据个数
        int[] bucketElementCounts = new int[10];


        //可以这样理解
        //bucketElementCounts[0]，记录就是bucket[0]桶的放入数据个数
        int[] bukcetElementCounts = new int[10];

        for (int i = 0,n=1; i < maxLength; i++,n*=10) {
            //第一轮（针对每个元素的个位进行排序处理） 第一次是个位 第二次是十位 第三次是百位
            for (int j = 0; j < arr.length; j++) {
                //取出每个元素的个位值
                int digitOfElement = arr[j]/n % 10;
                //放入对应的桶中
                bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];
                bucketElementCounts[digitOfElement]++;

            }
            //按照这个桶的顺序（一维数组的下标依次取出数据，放入原来数组）
            int index = 0;
            //遍历每一桶，并将桶中是数据，放入到原数组
            for (int k = 0; k < bukcetElementCounts.length; k++) {
                //如果桶中有数据，我么才放入原数组
                if (bucketElementCounts[k] != 0) {
                    //循环该桶即第k个桶(即第k个一维数组），放入
                    for (int l = 0; l < bucketElementCounts[k]; l++) {
                        //取出元素放入到arr
                        arr[index] = bucket[k][l];
                        index++;
                    }

                }
                //第1轮处理后，需要将每个bukcetElementCounts[k]=0;

                bucketElementCounts[k] = 0;

            }
        //    System.out.println("第1轮，对个位的排序处理arr=" + Arrays.toString(arr));
        }
    }
}
