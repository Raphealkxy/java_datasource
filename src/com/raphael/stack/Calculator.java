package com.raphael.stack;

/**
 * @author: create by  Raphaelkxy
 * @version: v1.0
 * @description: com.raphael.stack
 * @date:2019/7/16
 */
public class Calculator {
    public static void main(String[] args) {
            //下面来写表达式的运算
        String expression = "3+2*9-2";
        //创建两个栈，数栈，一个符号栈
        ArrayStack2  numStack =new ArrayStack2(10);
        ArrayStack2 operStack = new ArrayStack2(10);
        //定义需要的相关变量
        int index = 0;//用于扫描
        int num1 = 0;
        int num2 = 0;
        int oper  = 0;
        int res = 0;
        char ch =' ';//将每次扫描得到char保存到ch
        //开始while循环的扫描expression
        while(true){
            //依次得到expression
            ch = expression.substring(index,index+1).charAt(0);//返回字符串 但是字符串只有一个字符 拿出
            //判断ch是什么，然后做相应的处理
            if(operStack.isOper(ch)){//如果是运算符
                //判断当前的符号栈是否为空
                if(!operStack.isEmpty()){
                    //如果符号栈有操作符，就进行比较，如果当前的符号的优先级小于或者等于栈中的操作符，就进行下面的操作
                    //在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈
                    if(operStack.priority(ch)<=operStack.priority(operStack.peek())){
                        num1 = numStack.pop();
                        num2 =numStack.pop();
                        oper = operStack.pop();
                        res = numStack.cal(num1,num2,oper);
                        //把运算结构入数栈
                        numStack.push(res);
                        //然后将当前的操作符入符号栈
                        operStack.push(ch);
                    }else {
                        //如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈
                        operStack.push(ch);
                    }

                }else {
                    //为空 直接入栈
                    operStack.push(ch);//1+3
                }
            }else {
                //如果是数 直接入数栈
                numStack.push(ch-48);//? "1+3" //字符1 十进制对应49 转成数字1 49-48 以此类推
            }
            //让index+1 并判断是否扫描到expression最后
            index++;
            if(index>=expression.length()){
                break;
            }
        }

            //当表达式扫描完毕 就顺序的从数栈和符号栈中pop出相应的数和符号，并运行
        while(true){
            //如果符号栈为空，计算到最后的结果，数栈中只有一个结果
            if(operStack.isEmpty()){
                break;
            }
            num1 = numStack.pop();
            num2 = numStack.pop();
            oper = operStack.pop();
            res = numStack.cal(num1,num2,oper);
            numStack.push(res);
        }
        //将数栈的最后数，pop出
        System.out.printf("表达式的结果是%s=%d",expression,numStack.pop());
    }
}
//先创建一个栈，直接使用前面创建好得
//定义一个类 ArrayStack2 表示栈，需要扩展功能
class ArrayStack2 {
    private int maxSize;//栈大小
    private int[] stack;//数组，数组模拟栈，数据放在数组
    private int top = -1;//top表示栈顶，初始化为-1；

    //构造器
    public ArrayStack2(int maxSize) {
        this.maxSize = maxSize;
        stack = new int[this.maxSize];
    }

    //增加一个方法 可以返回当前栈顶的值 但不是真正的pop
    public int peek(){
        return stack[top];
    }
    //栈满 top = maxSize-1 栈满

    public boolean isFull() {
        return top == maxSize - 1;
    }

    //栈空
    public boolean isEmpty() {
        return top == -1;
    }

    //入栈 push
    public void push(int value) {
        //先判断栈满
        if (isFull()) {
            System.out.println("栈满");
            return;
        }
        top++;
        stack[top] = value;
    }

    //出栈
    public int pop() {
        //将栈顶的数据返回
        if (isEmpty()) {
            throw new RuntimeException("栈为空");
        }
        int value = stack[top];
        top--;
        return value;
    }

    //遍历栈 遍历时需要从栈顶开始显示数据
    public void list() {
        if (isEmpty()) {
            System.out.println("栈空，没有数据");
            return;
        }

        for (int i = top; i >= 0; i--) {
            System.out.printf("stack[%d]=%d\n", i, stack[i]);
        }
    }

    //返回运算符的优先级，优先级是程序员确定，优先级使用数字表示，数字越大，则优先级越高
    public int priority(int oper) {
        if (oper == '*' || oper == '/') {
            return 1;
        } else if (oper == '+' || oper == '-') {
            return 0;
        } else {
            return -1;//假定目前表达式只有+，-，*，/
        }
    }

    //判断是不是一个运算符 //要么是运算符要么数字
    public boolean isOper(char val) {
        return val == '+' || val == '-' || val == '*' || val == '/';
    }

    //计算方法
    public int cal(int num1, int num2, int oper) {
        int result = 0;//用于存放计算的结果
        switch (oper) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num2 - num1;//注意顺序
                break;
            case '*':
                result = num2 * num1;
                break;
            case '/':
                result = num2 / num1;
                break;
            default:
                break;

        }
        return result;
    }

}